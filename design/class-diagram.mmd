classDiagram
    class Polygon {
        -Vector2[] vertices
        -Transform transform
        -Force physics
        -Color fillColor
        -Color outlineColor
        -float mass
        -float friction
        -float bounciness
        +addVertex(Vector2)
        +removeVertex(index)
        +isSelfIntersecting() bool
        +update(float deltaTime)
        +draw()
    }

    class Transform {
        -Vector2 position
        -float rotation
        -Vector2 scale
        +getModelMatrix() Matrix2x2
    }

    class Force {
        -Vector2 velocity
        -Vector2 acceleration
        -bool isFixed
        +applyForce(Vector2)
        +update(float deltaTime)
    }

    class Scene {
        -Polygon[] objects
        -Vector2 gravity
        -Vector2 wind
        +addObject(Polygon)
        +updatePhysics(float deltaTime)
        +serializeToFile(string filename)
        +deserializeFromFile(string filename)
    }

    class PenTool {
        -Vector2[] currentVertices
        +startNewPolygon()
        +addVertex(Vector2)
        +completePolygon() Polygon
    }

    class StateManager {
        -State currentState
        +changeState(State newState)
        +handleInput()
    }

    class FileManager {
        +saveScene(Scene, string filename)
        +loadScene(string filename) Scene
        +savePolygon(Polygon, string filename)
        +loadPolygon(string filename) Polygon
    }

    class PhysicsWorld {
        -Polygon[] collidables
        +checkCollisions()
        +resolveCollisions()
        +applyGlobalForces()
    }

    class GUIController {
        -Polygon selectedObject
        +drawInterface()
        +updateObjectParameters()
    }

    Polygon *-- Transform: composition
    Polygon *-- Force: composition
    Scene o-- Polygon: aggregation
    Scene --> PhysicsWorld: updates
    StateManager --> PenTool: manages
    StateManager --> GUIController: manages
    GUIController --> Polygon: modifies
    FileManager --> Scene: serializes
    FileManager --> Polygon: serializes
    PhysicsWorld --> Polygon: checks

    class GameObject {
        <<abstract>>
        +update(float deltaTime)*
        +draw()*
    }

    GameObject <|-- Polygon

    note for PhysicsWorld "Uses SAT algorithm Contact point generation"
    note for FileManager "Custom binary format Human-readable options"
    note for Force "Handles gravity/friction Material properties"