classDiagram
%% Core Classes
    class Scene {
        -List~Polygon~ polygons
        -Vector2 gravity
        -Vector2 wind
        +addPolygon(Polygon)
        +removePolygon(Polygon)
        +updatePhysics(deltaTime)
        +serializeToFile(filename)
        +deserializeFromFile(filename)
    }

    class Polygon {
        -List~Vector2~ vertices
        -Transform transform
        -Force force
        -Color color
        -float friction
        -float bounciness
        +draw()
        +update()
        +addVertex(Vector2)
        +removeVertex(index)
        +isSelfIntersecting() bool
    }

    class Transform {
        -Vector2 position
        -float rotation
        -Vector2 scale
        +getModelMatrix() Matrix2x2
    }

    class Force {
        -float mass
        -Vector2 velocity
        -Vector2 acceleration
        -bool isFixed
        +applyForce(Vector2)
        +update(deltaTime)
    }

    class Vector2 {
        -float x
        -float y
        +operator+(Vector2) Vector2
        +operator*(float) Vector2
        +magnitude() float
        +normalize() Vector2
    }

%% Physics System
    class PhysicsWorld {
        -List~Polygon~ rigidBodies
        +checkCollisions()
        +resolveCollisions()
        +applyGlobalForces()
    }

    class CollisionInfo {
        +Polygon a
        +Polygon b
        +Vector2 normal
        +float depth
        +Vector2 contactPoint
    }

%% Tools and Managers
    class PenTool {
        -List~Vector2~ currentVertices
        -bool isDrawing
        +startNewPolygon()
        +addVertex(Vector2)
        +completePolygon() Polygon
    }

    class StateManager {
        -currentState State
        +changeState(State)
        +handleInput()
    }

    class FileManager {
        +saveScene(Scene, filename)
        +loadScene(filename) Scene
        +savePolygon(Polygon, filename)
        +loadPolygon(filename) Polygon
    }

    class GUIController {
        -Polygon selectedPolygon
        +drawInterface()
        +handleInput()
        +updateSelectedParameters()
    }

%% Relationships
    Scene "1" *-- "*" Polygon: contains
    Scene --> PhysicsWorld: updates
    Polygon *-- Transform: composition
    Polygon *-- Force: composition
    Polygon --> Vector2: uses
    PhysicsWorld --> CollisionInfo: generates
    PhysicsWorld --> Polygon: checks
    PenTool --> Polygon: creates
    StateManager --> PenTool: manages
    StateManager --> GUIController: manages
    GUIController --> Polygon: modifies
    FileManager --> Scene: serializes
    FileManager --> Polygon: serializes

%% Notes
    note for PhysicsWorld "Uses SAT algorithm for collision detection"
    note for FileManager "Custom binary format with human-readable options"
    note for Polygon "Supports self-intersection detection"
    note for Force "Handles fixed/non-fixed objects differently"